<?php

/*
 *         .__                                       .___
 * ______  |  |__  ______    ____   ____ _______   __| _/
 * \____ \ |  |  \ \____ \ _/ ___\ /  _ \\_  __ \ / __ |
 * |  |_> >|   Y  \|  |_> >\  \___(  <_> )|  | \// /_/ |
 * |   __/ |___|  /|   __/  \___  >\____/ |__|   \____ |
 * |__|         \/ |__|         \/                    \/
 *
 *
 * This library is developed by HimmelKreis4865 Â© 2022
 *
 * https://github.com/HimmelKreis4865/phpcord
 */

namespace phpcord\channel\types\guild;

use JetBrains\PhpStorm\ArrayShape;
use phpcord\async\completable\Completable;
use phpcord\channel\GuildChannel;
use phpcord\channel\helper\InvitableTrait;
use phpcord\channel\helper\TextChannelBaseTrait;
use phpcord\channel\TextChannel;
use phpcord\utils\Utils;

class GuildTextChannel extends GuildChannel implements TextChannel {
	use TextChannelBaseTrait;
	use InvitableTrait;
	
	/**
	 * @param int $id
	 * @param int $guildId
	 * @param string $name
	 * @param int $position
	 * @param int|null $parentId
	 * @param string|null $topic
	 * @param int|null $lastMessageId
	 * @param bool $nsfw
	 * @param int $rateLimitPerUser
	 * @param array $overwrites
	 */
	public function __construct(int $id, int $guildId, string $name, int $position, ?int $parentId, private ?string $topic = null, private ?int $lastMessageId = null, private bool $nsfw = false, private int $rateLimitPerUser = 0, array $overwrites = []) {
		parent::__construct($id, $guildId, $name, $position, $parentId, $overwrites);
	}
	
	public function getLastMessageId(): ?int {
		return $this->lastMessageId;
	}
	
	/**
	 * @return string|null
	 */
	public function getTopic(): ?string {
		return $this->topic;
	}
	
	public function getPosition(): int {
		return parent::getPosition(); // TODO: Change the autogenerated stub
	}
	
	/**
	 * @return int
	 */
	public function getRateLimitPerUser(): int {
		return $this->rateLimitPerUser;
	}
	
	/**
	 * @return bool
	 */
	public function isNsfw(): bool {
		return $this->nsfw;
	}
	
	public static function fromArray(array $array): ?self {
		if (!Utils::contains($array, 'id', 'name', 'position', 'guild_id')) return null;
		return new GuildTextChannel($array['id'], $array['guild_id'], $array['name'], $array['position'], @$array['parent_id'], @$array['topic'], @$array['last_message_id'], $array['nsfw'] ?? false, $array['rate_limit_per_user'] ?? 0,$array['permission_overwrites'] ?? []);
	}
	
	public function onMessageDelete(int $id): void {
		if ($id === $this->getLastMessageId()) $this->fetch();
	}
	
	public function replaceBy(GuildChannel $channel): void {
		if (!$channel instanceof GuildTextChannel) return;
		$this->lastMessageId = $channel->getLastMessageId();
		$this->nsfw = $channel->isNsfw();
		$this->topic = $channel->getTopic();
		$this->rateLimitPerUser = $channel->getRateLimitPerUser();
		parent::replaceBy($channel);
	}
	
	/**
	 * @param bool $nsfw
	 *
	 * @return Completable<GuildTextChannel>
	 */
	public function setNsfw(bool $nsfw = true): Completable {
		$this->nsfw = $nsfw;
		return $this->triggerUpdate();
	}
	
	/**
	 * @param string|null $topic
	 *
	 * @return Completable<GuildTextChannel>
	 */
	public function setTopic(?string $topic): Completable {
		$this->topic = $topic;
		return $this->triggerUpdate();
	}
	
	/**
	 * @param int $rateLimitPerUser
	 *
	 * @return Completable<GuildTextChannel>
	 */
	public function setRateLimitPerUser(int $rateLimitPerUser): Completable {
		$this->rateLimitPerUser = $rateLimitPerUser;
		return $this->triggerUpdate();
	}
	
	#[ArrayShape(['nsfw' => "bool", 'topic' => "null|string", 'rate_limit_per_user' => "int"])] public function getSerializationData(): array {
		return [
			'nsfw' => $this->nsfw,
			'topic' => $this->topic,
			'rate_limit_per_user' => $this->rateLimitPerUser
		];
	}
}